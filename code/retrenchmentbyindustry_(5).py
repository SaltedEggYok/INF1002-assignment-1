# -*- coding: utf-8 -*-
"""RetrenchmentByIndustry (5).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z5O4hm-9fDgSKPsOyXKfgA6kwnMVA3F5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Read retrenchment industry data
df = pd.read_csv("retrench_industry_yearly.csv")
print("Retrenchment industry data read successfully!")

df.describe

# Prints the count, unique, top, freq
# Describe function only takes in float or integer values
df['retrench'].describe()

# To print out a summary of the number of values
df.info()

# Read retrenchment industry data with null values, containing '-'
df = pd.read_csv("retrench_industry_yearly.csv", na_values = ["-"])
df

# To print out a summary of the number of missing values, containing '-'
sums = df.isnull().sum()
print(sums)
print("Total Missing Values:", sums.sum())

# Make a copy of the original dataframe
# Make a duplicate and make changes from the duplicate set to not make changes to the original dataset
# Drop rows with missing values, , containing '-'
df2 = df.copy()
df2=df2.dropna(how='any')

# To print out a summary of the number of missing values after dropping them
sums = df2.isnull().sum()
print(sums)
print("Total Missing Values:", sums.sum())

# To count the number of rows after dropping missing values
df.info()

# To drop any rows that have 'others' value in the industry columns 
df3 = df2.copy()
df3 = df3[(df3.industry1 != 'others') & (df3.industry2 != 'others') & (df3.industry3 != 'others')]

# To count the number of rows after dropping 'others' value in the industry columns 
df3.info()

# Print out recent 5 years from 2017 to 2021
df4 = df3.loc[(df3['year'] >= 2017) & (df3['year'] <= 2021)]
print(df4)

# To export dataframe to csv file after cleaned
# df4.to_csv('retrench_industry_yr_cleaned.csv', index=False)

# Sort retrench value in ascending order
df5 = df4.sort_values(by = ['retrench'])
print(df5)

df5["industry1"].nunique()

df5["industry1"].unique()

# Retrieve retrenchment rate by industry type from 2017-2021
df5.groupby(['industry1'])['retrench'].agg('sum')

# Plot retrenchment rate by industry type from 2017-2021
# Noticed that amongst the 3 unique industry types, services has the most retrenchment rate
plt.rcParams['figure.figsize']=(30,9)
df5.groupby(['year', 'industry1'])['retrench'].agg('sum').plot.bar(color=['lightsalmon', 'lightblue', 'plum'])
plt.xticks(rotation='horizontal')
plt.show()

plt.rcParams['figure.figsize']=(20,5)
df5.boxplot(column='retrench', by='industry1')
plt.show()

df5.groupby(['industry3'])['retrench'].agg('sum')

# Plot retrenchment rate by industry type from 2017-2021
# Noticed that amongst the 3 unique industry types, services has the most retrenchment rate
plt.rcParams['figure.figsize']=(5,25)
df5.groupby(['year', 'industry3'])['retrench'].agg('sum').plot.barh(color=['lightsalmon', 'lightblue', 'plum'])
plt.xticks(rotation='horizontal')
plt.show()

# Option a). Look at the retrenchment rate by industry before Covid-19
df6 = df5.loc[(df5['year'] >= 2017) & (df5['year'] <= 2019)][['year', 'industry3', 'retrench']]
print(df6)

# Option b). Look at the retrenchment rate by industry during Covid-19
df7 = df5.loc[df5['year']==2020][['year', 'industry3', 'retrench']]
print(df7)

# Option c). Look at the retrenchment rate by industry for the post-recovery Covid-19
df8 = df5.loc[df5['year']==2021][['year', 'industry3', 'retrench']]
print(df8)

df8

df5["industry3"].nunique()

# Which (general) industry has the highest retrenchment rate by industry type from 2017 to 2019
df6.groupby(['industry3'])['retrench'].agg('sum')

# Plot bar chart to visualise which (general) industry has the highest retrenchment rate by industry type from 2017 to 2019
plt.rcParams['figure.figsize']=(10,8)
df6.groupby(['industry3'])['retrench'].agg('sum').plot.barh(color=['salmon'])

# Which (general) industry has the highest retrenchment rate by industry type in 2020
df7.groupby(['industry3'])['retrench'].agg('sum')